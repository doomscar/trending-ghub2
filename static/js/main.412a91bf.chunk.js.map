{"version":3,"sources":["TrendGit.js","App.js","serviceWorker.js","index.js"],"names":["TrendGit","props","data","toError","react_default","a","createElement","trendsTemplate","repo","map","_ref","name","language","description","date","url","key","className","target","rel","href","Fragment","TRENDS_API_URL","App","state","countResult","rst","rp","item","index","_this","setState","fetchDate","_callee2","rest","trendsData","regenerator_default","wrap","_context2","prev","next","_ref2","Object","asyncToGenerator","mark","_callee","res","resu","_context","fetch","concat","author","sent","json","hasOwnProperty","abrupt","commit","committer","substr","message","stop","this","_x2","apply","arguments","Promise","all","then","result","fetchRepos","_callee3","_context3","error","console","src_TrendGit","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.412a91bf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TrendGit = props => {\r\n  const {data} = props;\r\n  //console.log(data.repo);\r\n  if (data.toError) {\r\n    return <div>Ошибка загрузки!</div>\r\n  }\r\n\r\n  const trendsTemplate = data.repo.map(function ({name, language, description, date, url}) {\r\n    return (\r\n      <div key={name} className={'Trande-git'}>\r\n        <p><span>Имя репозитория:</span> {name}</p>\r\n        <p><span>Основной язык:</span> {language}</p>\r\n        <p><span>Описание:</span> {description}</p>\r\n        <p><span>Дата последнего коммита:</span> {date}</p>\r\n        <p><span>Ссылка:</span> <a target='_blank' rel=\"noopener noreferrer\" href={url}>{url}</a></p>\r\n      </div>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <>\r\n      {trendsTemplate}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TrendGit;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport TrendGit from './TrendGit';\r\n\r\nconst TRENDS_API_URL = 'https://github-trending-api.now.sh/repositories';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    repo: [],\r\n    toError: false,\r\n  }\r\n\r\n  countResult = (rst, rp) => {\r\n    const repo = rst.map(function (item, index) {\r\n      item.date = rp[index];\r\n      return (\r\n        item\r\n      )\r\n    }\r\n    )\r\n    //console.log(rp);\r\n    this.setState({ repo })\r\n  }\r\n\r\n  fetchDate = async (rest) => {\r\n    const trendsData = rest.map(async function (item) {\r\n      const res = await fetch(`https://api.github.com/repos/${item.author}/${item.name}/commits?page=1&per_page=1`);\r\n      const resu = await res.json();\r\n      if (resu.hasOwnProperty(\"0\")){\r\n        return (\r\n          //resu[0].commit.committer.date.substr(0,10)\r\n          `${resu[0].commit.committer.date.substr(0,10)} ${resu[0].commit.committer.date.substr(11,5)}`\r\n          //resu.message\r\n          //console.log(resu)\r\n        )\r\n      }\r\n      else{\r\n        return (\r\n          //resu[0].commit.committer.date.substr(0,10)\r\n          //`${resu[0].commit.committer.date.substr(0,10)} ${resu[0].commit.committer.date.substr(11,5)}`\r\n          resu.message\r\n          //console.log(resu)\r\n        )\r\n      }\r\n    }\r\n    )\r\n    const repo = await Promise.all(trendsData).then((result) => result);\r\n    //this.setState({ repo });\r\n    this.countResult(rest, repo);\r\n  }\r\n\r\n  fetchRepos = async () => {\r\n    const res = await fetch(TRENDS_API_URL);\r\n    const result = await res.json();\r\n    //App.cssthis.setState({ result });\r\n    this.fetchDate(result);\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      this.fetchRepos();\r\n    } catch (error) {\r\n      console.error(error);\r\n      this.setState({ toError: true });\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    const repo = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          < TrendGit data={repo} />\r\n          {console.log(this.state.repo)}\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}