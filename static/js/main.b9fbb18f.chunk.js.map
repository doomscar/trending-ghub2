{"version":3,"sources":["TrendGit.js","App.js","serviceWorker.js","index.js"],"names":["TrendGit","props","data","repo","toError","react_default","a","createElement","trendsTemplate","map","item","index","key","className","name","language","description","target","rel","href","url","Fragment","toJson","json","App","state","_this2","this","fetch","then","setState","catch","e","console","error","src_TrendGit","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNA6BeA,SA3BE,SAAAC,GACf,IAAIC,EAAOD,EAAMC,KACjB,IAAKA,EAAKC,OAASD,EAAKE,QACtB,OAAOC,EAAAC,EAAAC,cAAA,kEAGT,GAAIL,EAAKE,QACP,OAAOC,EAAAC,EAAAC,cAAA,qGAGT,IAAMC,EAAiBN,EAAKC,KAAKM,IAAI,SAASC,EAAMC,GAClD,OACEN,EAAAC,EAAAC,cAAA,OAAKK,IAAKD,EAAOE,UAAW,aAC1BR,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,sGAAH,IAAkCG,EAAKI,MACvCT,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,0FAAH,IAAgCG,EAAKK,UACrCV,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,iEAAH,IAA2BG,EAAKM,aAChCX,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,qDAAH,IAAwBF,EAAAC,EAAAC,cAAA,KAAGU,OAAO,SAASC,IAAI,sBAAsBC,KAAMT,EAAKU,KAAMV,EAAKU,SAIjG,OACEf,EAAAC,EAAAC,cAACF,EAAAC,EAAMe,SAAP,KACGb,KCpBP,SAASc,EAAOpB,GACd,OAAOA,EAAKqB,WA+BCC,6MAtBbC,MAAQ,CACNtB,KAAM,KACNC,SAAS,sFAGQ,IAAAsB,EAAAC,KACjBC,MAAM,mDAAmDC,KAAKP,GAAQO,KAAK,SAAA3B,GAAI,OAAIwB,EAAKI,SAAS,CAAC3B,KAAMD,MAAQ6B,MAAM,SAAAC,GAAMC,QAAQC,MAAMF,GAAIN,EAAKI,SAAS,CAAC1B,SAAS,uCAItK,IAAMF,EAAOyB,KAAKF,MAElB,OACEpB,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAAA,UAAQM,UAAU,cAClBR,EAAAC,EAAAC,cAAE4B,EAAF,CAAWjC,KAAMA,aAhBPkC,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.b9fbb18f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TrendGit = props =>{\r\n  let data = props.data;\r\n  if (!data.repo && !data.toError) {\r\n    return <div>Загрузка...</div>\r\n  }\r\n\r\n  if (data.toError){\r\n    return <div>Ошибка загрузки!</div>\r\n  }\r\n\r\n  const trendsTemplate = data.repo.map(function(item, index) {\r\n    return (\r\n      <div key={index} className={'trandeGit'}>\r\n        <p><span>Имя репозитория:</span> {item.name}</p>\r\n        <p><span>Основной язык:</span> {item.language}</p>\r\n        <p><span>Описание:</span> {item.description}</p>\r\n        <p><span>Ссылка:</span> <a target='_blank' rel=\"noopener noreferrer\" href={item.url}>{item.url}</a></p>\r\n      </div>\r\n  )})\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      {trendsTemplate}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default TrendGit;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport TrendGit from './TrendGit';\r\n\r\nfunction toJson(data) {\r\n  return data.json();\r\n}\r\n\r\n/*function printError(e){\r\n  console.error(e);\r\n  this.setState({toError: true});\r\n}*/\r\n\r\nclass App extends Component {\r\n  state = {\r\n    repo: null,\r\n    toError: false,\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('https://github-trending-api.now.sh/repositories').then(toJson).then(data => this.setState({repo: data})).catch(e => {console.error(e); this.setState({toError: true});}); // catch(printError.bind(this)\r\n  }\r\n\r\n  render() {\r\n    const data = this.state;\r\n   \r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        < TrendGit data={data} />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}